#!/usr/bin/env perl

use 5.020;
use autodie;

package EnvConfigurator;

use Fcntl q/:seek/;
use File::Spec::Functions qw/catdir/;
use File::Temp qw/:seekable/;
use File::Copy qw/copy/;
use Readonly;
use feature q/signatures/;
use Getopt::Long;

no warnings qw/experimental::signatures/;

Readonly::Scalar my $USER => 'edelcides';
Readonly::Scalar my $HOME_DIR => catdir ('/home', $USER);

sub new {
  my $class = shift;
  my $self = {install_list => [],
	      remove_list => [],
	      repositories_list => {},
	      @_,
	     };


  $self->{user}{home} = catdir ('/home/', $self->{user}->{name});

  bless $self, $class;

  my %options = (install_list => '',
		 remove_list => '',
		 repositories_list => '',);

  my $parser = Getopt::Long::Parser->new;
  $parser->configure (qw/bundling no_ignore_case/);
  $parser->getoptions ('install-packages-list|i=s' => \$options{install_list},
		       'remove-packages-list|r=s' => \$options{remove_list},
		       'repositories-list|s=s' => \$options{repositories_list});

  $self->build_packages_list ('install_list', $options{install_list});
  $self->build_packages_list ('remove_list', $options{remove_list});
  $self->build_repositories_list ($options{repositories_list});

  return $self;
}

sub build_packages_list {
  my ($self, $list_name, $list_file) = @_;

  if (-f $list_file) {
    open (my $INPUT, '<', $list_file);

    while (my $line = $INPUT->getline) {
      chomp $line;
      push @{$self->{$list_name}}, $line;

    }
    close $INPUT;
  }
}

sub build_repositories_list {
  my ($self, $file_name) = @_;
  if (-f $file_name) {
    open (my $INPUT, '<', $file_name);
    while (my $line = $INPUT->getline) {
      chomp $line;
      my @repo_info = split q/=/, $line;
      $self->{repositories_list}->{$repo_info[0]} = $repo_info[1];
    }
    close $INPUT;
  }
}

sub add_repositories {
  my $self = shift;
  for my $name (keys %{$self->{repositories_list}}) {
    say sprintf 'zypper ar -cfg %s %s', $self->{repositories_list}->{$name}, $name;
  }

  say 'zypper refresh';
}

sub remove_packages {
  my $self = shift;
  for my $name (@{$self->{remove_list}}) {
    say sprintf 'zypper rl %s', $name;
    say sprintf 'zypper remove -y %s', $name;
    say sprintf 'zypper al %s', $name;
  }
}

sub install_packages {
  my $self = shift;
  say sprintf 'zypper install -y %s', join q/ /, @{$self->{install_list}};
}

sub run {
  my $self = shift;

  $self->add_repositories;
  $self->remove_packages;
  $self->install_packages;
  $self->set_hostname;
  $self->add_fstab_entry;
  $self->add_udev_rule;
  $self->add_alternative;

  my $shell = Shell->new ($self->{user}->{shell});
  $shell->set ($shell->{user}->{name});

  if (exists  $$self->{time}->{ntp}) {
    system "timedatectl $self->{time}->{ntp}";
  }

  if (exists $self->{time}->{timezone}) {
    system "timedatectl set-timezone $self->{time}->{timezone}";
  }

  if (exists $self->{time}->{localtime}) {
    system "timedatectl set-local-rtc $self->{time}->{localtime}";
  }
}

sub set_hostname {
  my $self = shift;
  open (my $FH, '<', '/etc/hostname');
  my $line = $FH->getline ();
  chomp $line;

  return if $line eq $self->{hostname};

  open (my $FH, '>', '/etc/hostname');
  say {$FH} $self->{hostname};
}

sub add_fstab_entry {
  my $self = shift;
  my $file = catdir '/etc/', 'fstab';

  open (my $FH, '<', $file);
  while (my $line = $FH->getline) {
    chomp $line;
    return  if $line =~ m%$self->{fstab}->{device}|$self->{fstab}->{mountpoint}%;
  }
  seek $FH, 0, SEEK_END;
  say $self->{user}->{home};
  my $fstab_entry = sprintf "%s\t%s\t%s\t%s\t%d\t%d", catdir ('/dev',
							      $self->{fstab}->{device}),
                                                      catdir ($self->{user}->{home}, $self->{fstab}->{mountpoint}),
						      $self->{fstab}->{fstype},
						      join (q/,/, @{$self->{fstab}->{options}}),
						      $self->{fstab}->{dump},
						      $self->{fstab}->{pass};
  say {$FH} $fstab_entry;
}

sub add_udev_rule {
  my $self = shift;
  my $udev_file = catdir '/etc', 'udev', 'rules.d',
                         '51-android.rules';

  return if -f $udev_file;

  my $udev_rule = sprintf "SUBSYSTEM==\"usb\", ATTR{idVendor}==\"%s\", MODE=\"0%o\", GROUP=\"%s\"",
                          $self->{udev}->{vendor}, $self->{udev}->{mode},
			  $self->{udev}->{group};

  open (my $FH, '>', $udev_file);
  say {$FH} $udev_rule;
}

sub add_alternative {
  my $self = shift;
  system "update-alternatives --install /usr/local/bin/emacs emacs /usr/local/bin/gemacs 10"
}

package Shell;

use Carp qw/croak/;
use File::Temp;
use File::Spec::Functions qw/catdir/;
use File::Copy qw/copy/;

sub new {
  my ($class, $name) = @_;
  my $self = {
	      name => undef,
	      path => undef,
	     };

  my $get_shell_name = sub ($shell) {
    my @components = split q{/}, $shell;
    $components[$#components];
  };

  $name = $get_shell_name->($name);

  open (my $FH, '<', '/etc/shells');
  while (my $excutable = $FH->getline) {
    chomp $excutable;
    my $shell_entry = $get_shell_name->($excutable);
    if ($name eq $shell_entry && -x $excutable) {
      $self->{name} = $name;
      $self->{path} = $excutable;
    }
  }

  unless ($self->{name} && $self->{path}) {
    croak "Invalid shell \"$name\"."
  }

  bless $self, $class,
}

sub set {
  my ($self, $user) = @_;

  my $passwd_file = catdir '/etc', 'passwd';
  my $tmp_file = File::Temp->new (CLEANUP => 1,
  				  TEMPLATE => 'config-env-artifact-XXXXX',
  				  TMPDIR => 1,
  				  SUFFIX => '.txt');

  copy $passwd_file, $tmp_file->filename;
  $tmp_file->seek (0, SEEK_SET);

  open (my $FH, '>', $passwd_file);
  while (my $line = $tmp_file->getline) {
    chomp $line;
    if ($line =~ /$user/) {
      my @user_info = split q/:/, $line;
      if ($self->{path} ne $user_info[6]) {
  	$user_info[6] = $self->{path};
  	$line = join q/:/, @user_info;
      }
    }
    say {$FH} $line;
  }
}

package main;

my $configurator = EnvConfigurator->new (user => {
						  name => 'edelcides',
						  groups => ['wheel'],
						  shell => 'zsh',
						 },

					 time => {
						  ntp => 1,
						  timezone => 'Europe/Lisbon',
						  localtime => 1,
						 },

					 udev => {
						  vendor => '22b8',
						  mode => '438',
						  group => 'plugdev',
						 },

					 fstab => {
						   device => 'sdb1',
						   fstype => 'xfs',
						   options => ['defaults', 'noatime'],
						   dump => 0,
						   pass => 2,
						   mountpoint => 'chi.d',
						  },
					 hostname => 'wave.lan',
					);
$configurator->run;
