#!/usr/bin/env perl

package EnvConf;
use 5.02000;
use utf8;
use warnings;

use File::Basename qw/basename dirname/;
use File::Spec::Functions qw/catdir/;
use File::Copy qw/copy/;
use File::Temp qw/:seekable/;
use Getopt::Long;
use Carp qw/croak carp/;
use Cwd qw/realpath/;
use Readonly;
use YAML::Tiny;
use Pod::Usage;
use Env qw/HOME/;

Readonly::Scalar my $BASE_PATH => dirname dirname realpath __FILE__;

sub new {
  my $class = shift;

  my @vars = qw/CHI_COD_DIR CHI_ENV_DIR PERL_CPANM_HOME
		PERLBREW_ROOT/;

  for my $var (@vars) {
    unless (exists $ENV{$var}) {
      croak "Environment variable `$var' is not set.";
    }
  }

  my $self = {
	      'unwanted-dirs' => [],
	      'wanted-dirs' => [],
	      'files-to-link' => {},
	      'files-to-copy' => {},
  };

  my $parser = Getopt::Long::Parser->new;
  $parser->configure (qw/bundling no_ignore_case/);
  my %options = (
		 'config-file' => catdir ($BASE_PATH,
					  'config-options.yml'),
		 verbose => 0,
		 force => 0,
		 help => 0,
  );

  my $status = $parser->getoptions ('verbose|v' => \$options{verbose},
		       'force|f' => \$options{force},
		       'config-file|c=s' => \$options{'config-file'},
                       'help|h' => \$options{help},);

  pod2usage 1 if delete $options{help};
  pod2usage 2 unless $status;

  my $doc= YAML::Tiny->read (delete $options{'config-file'});
  $self->{doc} = $doc->[0]->{'config-desktop'};
  $self->{$_} = $options{$_} for keys %options;

  $self->{action} = EnvConf::File::Action->new (%options);

  bless $self, $class;
}

sub setup_files {
  my ($self, $node_name, $action_fn) = @_;

  my @node_content = ();
  for my $entry (@{$self->{doc}}) {
    if (ref $entry eq 'HASH') {
      for my $name (keys %$entry) {
	if ($name eq $node_name) {
	  @node_content =  @{$entry->{$name}};
	  last;
	}
      }
    }
  }

  for my $sub_node (@node_content) {
    my $type = ref $sub_node;
    if ($type) {
      if ($type eq 'HASH') {
	for my $key (keys %{$sub_node}) {
	  my $result = $self->expand_variable ($key, ${$sub_node}{$key});
	  $action_fn->($self->{action}, $result->{src}, $result->{dest});
	}
      }
    }
    else {
      my $result = $self->expand_variable ($sub_node, undef);
      $action_fn->($self->{action}, $result->{src});
    }
  }
}

sub expand_variable {
  my ($self, $src, $dest) = @_;

  my $result = {
		'src' => undef,
		'dest' => undef,
  };

  if ($src) {
    my $var_info = $self->get_variable ($src);
    next unless defined $var_info;

    if (ref $var_info) {
      for my $name (keys %{$var_info}) {
	my $quoted_name = ${$var_info->{$name}}{'quoted-name'};
	my $value = ${$var_info->{$name}}{value};

	$src =~ s|$quoted_name|$value|;
      }
    }
    else {
      if ($dest) {
	$src = catdir $BASE_PATH, $src;
      }
      else {
	$src = catdir $HOME, $src;
      }
    }

    $result->{src} = $src;
  }

  if ($dest) {
    my $var_info = $self->get_variable ($dest);

    next unless defined $var_info;

    if (ref $var_info) {
      for my $name (keys %{$var_info}) {
	my $quoted_name = ${$var_info->{$name}}{'quoted-name'};
	my $value = ${$var_info->{$name}}{value};

	$dest =~ s|$quoted_name|$value|;
      }
    }

    if ($dest =~ m|(?<invisible>_)?self$|) {
      my $name = basename $src;
      $name = ".$name" if defined $+{invisible};

      $dest =~ s|(_?self$)|$name|;
    }
    elsif ($dest =~
	     m%(?<invisible>^_|(?<sep>/)_)(?<name>\w+$)%) {

      my ($invisible, $name, $sep) = ($+{invisible}, $+{name},
				      $+{sep});
      if (defined $invisible && defined $sep) {
	$dest =~ s%/_$name%/.$name%;
      }
      else {
	$dest =~ s!_$name!.$name!;
      }
    }

    $dest = catdir $HOME, $dest unless $dest =~ m|^/|;
    $result->{dest} = $dest;
  }

  return $result;
}

sub get_variable {
  my ($self, $str) = @_;

  my %matches = $str =~
    m|(?<var_fake_name>\$(?<var_real_name>\w+)\$)|g;
  my %result = ();
  if (%matches) {
    for my $var_tmpl_name (keys %matches) {
      my $real_name = $matches{$var_tmpl_name};

      if (exists $ENV{$real_name} && defined $ENV{$real_name}) {
	my $value = $ENV{$real_name};
	$value =~ s|^~/|$HOME/|;

	$result{$real_name} =  {
				'value' => $value,
				'quoted-name'
				   => quotemeta ($var_tmpl_name),
	};

	# say $result{$real_name}->{value};
      }
      else {
	carp "Environment variable `$real_name' does not exist.";
	return;
      }
    }

    return \%result;
  }
  else {
    return 1;
  }
}

sub run {
  my $self = shift;

  $self->pre_configure;
  $self->configure;
}

sub pre_configure {
  my $self = shift;

  $self->setup_files ('files-to-copy',
		      \&EnvConf::File::Action::copy_file);
  $self->setup_files ('unwanted-files',
		      \&EnvConf::File::Action::unlink);
  $self->setup_files ('files-to-link', \&EnvConf::File::Action::link);
  $self->setup_files ('wanted-dirs', \&EnvConf::File::Action::create);

  my @dirs;
  push @dirs, catdir ($HOME, '.ssh');
  while (my $dir = pop @dirs) {
    opendir (my $DIR_HANDLE, $dir);
    while (my $dir_entry = readdir $DIR_HANDLE) {
      next if $dir_entry eq '..' || $dir_entry eq '.';
      my $shortname = $self->filename_shortify ($dir_entry);
      $dir_entry = catdir $dir, $dir_entry;
      my $perm_mode = (stat $dir_entry)[2] & 0777;
      if (-f $dir_entry) {
        if ($perm_mode != 0600) {
	  chmod 0600, $dir_entry;
	  if ($self->{verbose}) {
	    say "Fixed permissions of \'$shortname\' to 0600";
	  }
        }
      }
      elsif (-d $dir_entry) {
        if ($perm_mode != 0700) {
	  chmod 0700, $dir_entry;
	  if ($self->{verbose}) {
	    say "Fixed premissions of \'$shortname\' to 0700";
	  }
        }
        push @dirs, $dir_entry;
      }
    }
    closedir $DIR_HANDLE;
  }
}

sub filename_shortify {
  my ($self, $file) = @_;

  $file =~ s|$HOME|~|;

  return $file;
}

sub configure {
  my $self = shift;

  if ($self->{force}) {
    for my $src (keys %{$self->{'files-to-link'}}) {
      my $dest = ${$self->{'files-to-link'}}{$src};
      my $shortname = $self->filename_shortify ($dest);
      if (-f $dest) {
        unlink $dest;

        say "Removed file `$shortname'." if $self->{verbose};
      }
      elsif (-d $dest) {
        remove_tree $dest;
        say "Removed directory `$shortname'." if $self->{verbose};
      }
    }
  }

  my %ftl = %{$self->{'files-to-link'}};
  while (my ($file, $link) = each %ftl) {
    my $shortname = $self->filename_shortify ($link);
    if (-l $link) {
      my $target = readlink $link;
      next if $target eq $file && !$self->{force};
      unlink $link;
      say "Removed link: `$shortname'." if $self->{verbose};
    }
    elsif (-f $link) {
      unlink $link;
      say "Removed file: `$shortname'." if $self->{verbose};
    }
    elsif (-d $link) {
      remove_tree $link;
      say "Removed directory: `$shortname'." if $self->{verbose};
    }

    if (! -e $link || $self->{force}) {
      symlink $file, $link;
      say "Created symlink: `$shortname'." if $self->{verbose};
    }
  }

  while (my ($src, $dest) = each %{$self->{'files-to-copy'}}) {
    say "src -> $src\ndest ->  $dest";
  }

  my $zeal_conf_file = catdir $ENV{HOME}, '.config', 'Zeal',
                              'Zeal.conf';
  my $docset_dir = catdir $ENV{CHI_SHARE_DIR}, 'zeal', 'docset';

  return unless -f $zeal_conf_file;
  my $tmp = File::Temp->new (CLEANUP => 1,
			     TMPDIR => 1,
			     TEMPLATE => 'dc-artifact-XXXXXXX',
			     SUFFIX => '.conf');
  copy $zeal_conf_file, $tmp->filename;
  $tmp->seek (0, SEEK_SET);
  open (my $ZEAL_FH, '>', $zeal_conf_file);
  while (my $line = $tmp->getline ()) {
    chomp $line;
    $line =~ s|path=.*|path=$docset_dir|;
    say {$ZEAL_FH} $line;
  }
}

package EnvConf::File::Action;
use File::Path qw/make_path remove_tree/;
use Carp qw/croak carp/;
use File::Copy qw/copy/;

sub new {
  my $class = shift;
  my $self = {
	      verbose => 0,
	      force => 0,
	      @_,
  };

  bless $self, $class;
}

sub copy_file {
  my ($self, $src, $dest) = @_;
  if (-e $dest) {
    if ($self->{force}) {
      unlink $dest;
      say "Removed `$dest'.";
    }
    else {
      if ($self->{verbose}) {
	say "File $dest exists, noting will be done.";
      }
      return;
    }
  }

  copy $src, $dest;
  say "Copied `$src' -> `$dest'" if $self->{verbose};
}

sub unlink {
  my ($self, $file) = @_;
  if (-f $file) {
    unlink $file;
  }
  elsif (-d $file) {
    remove_tree $file;
  }
  else {
    return;
  }

  say "Unlinked `$file'.";
}

sub link {
  my ($self, $src, $dest) = @_;

  unless (-e $src) {
    carp "File `$src' does not exist.";
    return;
  }

  if (-l $dest) {
    my $target = readlink $dest;

    return if $target eq $src && !$self->{force};

    CORE::unlink $dest;
    say "Removed link:`$dest'.";
  }
  elsif (-f $dest) {
    CORE::unlink $dest;
    say "Removed file: `$dest'.";

  }
  elsif (-d $dest) {
    remove_tree $dest;
    say "Removed link: `$dest'.";
  }

  if (! -e $dest) {
    symlink $src, $dest;
    say "Created symlink to `$dest'." if $self->{verbose};
  }
}

sub create {
  my ($self, $dir) = @_;

  if (-d $dir) {
    say "Directory `$dir' exists." if $self->{verbose};
  }
  else {
    make_path $dir;
    say "Created directory `$dir'.";
  }
}

package main;

EnvConf->new->run;

__END__

=head1 NAME

Configure my openSuse desktop.

=head1 SYNOPSIS

config-desktop [OPTIONS]

Options:
  --help, -h             Print this help message.

  --verbose, -v          Be verbose.

  --force, -f            Force re-link of files.

  --config-file, -c      A YAML file with configurations.

=cut
