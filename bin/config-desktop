#!/usr/bin/env perl

package EnvConf;
use 5.012000;

use File::Path qw(make_path remove_tree);
use File::Basename q(dirname);
use File::Spec::Functions q(catdir);
use File::Copy qw/copy move/;
use File::Temp qw/:seekable/;

sub new : method {
  my ($class, $self) = @_;

  my @uf = qw/history
      .bash_history
      .bashrc
      .profile
      Examples
      examples
      Public
      Templates
      templates
      Documents
      Pictures
	     /;

  $self->{unwanted_files} = [];
  for my $file (@uf) {
      push @{$self->{unwanted_files}}, catdir ($ENV{HOME}, $file);
  }

  $self->{files_to_link} = {
			    catdir($ENV{CHI_COD_DIR}, 'emacs.d') => catdir($ENV{HOME}, '.emacs.d'),

			    catdir($ENV{CHI_INCUBATOR_DIR}, 'xemacs.d') => catdir($ENV{HOME}, '.xemacs.d'),
      catdir($ENV{CHI_ENV_DIR}, 'ssh-config') => catdir($ENV{HOME}, '.ssh', 'config'),
      catdir($ENV{CHI_ENV_DIR}, 'tmux.conf') => catdir($ENV{HOME}, '.tmux.conf'),
      catdir($ENV{CHI_ENV_DIR}, 'x11', 'fonts.conf') => catdir($ENV{HOME},
      							  '.config',
      							  'fontconfig', 'fonts.conf'),
			    catdir($ENV{CHI_SHARE_DIR}, 'fonts') => catdir($ENV{HOME}, '.fonts'),
			    catdir($ENV{CHI_ENV_DIR}, qw (shell zshenv)) => catdir($ENV{HOME}, '.zshenv'),
      catdir($ENV{CHI_ENV_DIR}, qw (shell zshrc)) => catdir($ENV{HOME}, '.zshrc'),
      catdir ($ENV{CHI_ENV_DIR}, qw (lsp abcl-completions)) => catdir ($ENV{HOME}, '.abcl-completions'),
      catdir($ENV{CHI_ENV_DIR}, qw (lsp abclrc)) => catdir ($ENV{HOME}, '.abclrc'),
			    catdir($ENV{CHI_ENV_DIR}, qw (lsp ccl-init.lisp)) => catdir ($ENV{HOME}, '.ccl-init.lisp'),
			    catdir($ENV{CHI_ENV_DIR}, qw (lsp cmucl-init.lisp)) => catdir ($ENV{HOME}, '.cmucl-init.lisp'),
      catdir($ENV{CHI_ENV_DIR}, qw (lsp sbclrc)) => catdir ($ENV{HOME}, '.sbclrc'),
      catdir($ENV{CHI_ENV_DIR}, 'hgrc') => catdir ($ENV{HOME}, '.hgrc'),
      catdir($ENV{CHI_ENV_DIR}, 'gitconfig') => catdir ($ENV{HOME}, '.gitconfig'),
      catdir($ENV{CHI_ENV_DIR}, 'perlcriticrc') => catdir ($ENV{HOME}, '.perlcriticrc'),
			    catdir($ENV{CHI_ENV_DIR}, 'readline.conf') => catdir ($ENV{HOME}, '.readline.conf'),
			    catdir($ENV{CHI_ENV_DIR}, 'wgetrc') => catdir ($ENV{HOME}, '.wgetrc'),
			    catdir ($ENV{CHI_SHARE_DIR}, 'icons') => catdir ($ENV{HOME}, '.icons'),
			    catdir ($ENV{CHI_IMAGE_DIR}) => catdir ($ENV{HOME}, 'Images'),
			    catdir ($ENV{CHI_VIDEO_DIR}) => catdir ($ENV{HOME}, 'Videos'),
			    catdir ($ENV{CHI_AUDIO_DIR}) => catdir ($ENV{HOME}, 'Music'),
  };

  $self->{wanted_dirs} = [];

      catdir($ENV{HOME}, '.config', 'fontconfig'),
      catdir($ENV{HOME}, '.ssh'),
      catdir($ENV{HOME}, '.ssh', 'var'),
      catdir ($ENV{CHI_SHARE_DIR}, 'zeal', 'docset'),
      $ENV{PERLBREW_ROOT},
      $ENV{PERL_CPANM_HOME},
      $ENV{CHI_BIN_DIR},



  $self->{'env'} ={
		   install => { },

		   check => {  },
		   };

  bless $self, $class;
}

# perform some pre initializations such as remove dummy files.
sub pre_configure() {
  my $self = shift;

  for my $dir (@{$self->{wanted_dirs}}) {
    if (-d $dir) {
      say("`$dir` exists. Nothing will be done.") if $self->{verbose};
    }
    else {
      make_path($dir);
      say("Created `$dir`...") if $self->{verbose};
    }
  }

  for my $file (@{$self->{unwanted_files}}) {
    if (-d $file) {
     remove_tree $file;
      say("Removed `$file`...");
    }
    elsif (-f $file) {
     unlink $file if -f $file;
      say("Removed `$file`");
    }
  }

  my @dirs;
  push @dirs, catdir($ENV{HOME}, '.ssh');
  while (my $dir = pop @dirs) {
    opendir(my $DIR_HANDLE, $dir);
    while (my $dir_entry = readdir $DIR_HANDLE) {
      next if ($dir_entry eq '..') or ($dir_entry eq '.');

      $dir_entry = catdir $dir, $dir_entry;
      my $perm_mode = (stat $dir_entry)[2] & 0777;
      if (-f $dir_entry) {
        if ($perm_mode != 0600) {
         chmod 0600, $dir_entry;
          say("Fixed permissions of \'$dir_entry\' to 0600") if $self->{verbose};
        }
      }
      elsif (-d $dir_entry) {
        if ($perm_mode != 0700) {
         chmod 0700, $dir_entry;
          say("Fixed premissions of \'$dir_entry\' to 0700") if $self->{verbose};
        }
        push @dirs, $dir_entry;
      }
    }
    closedir $DIR_HANDLE;
  }
}

sub configure() : method {
  my $self = shift;

  if ($self->{force}) {
    for my $src (keys %{$self->{files_to_link}}) {
      my $dest = ${$self->{files_to_link}}{$src};
      if (-f $dest) {
        unlink $dest;
        say("Removed file \'$dest\'.");
      }
      elsif (-d $dest) {
        remove_tree $dest;
        say("Removed directory \'$dest\'.");
      }
    }
  }

  my %ftl = %{$self->{files_to_link}};
  while (my ($file, $link) = each %ftl) {
    if (-l $link) {
      my $target = readlink $link;
      next if $target eq $file && !$self->{force};
      unlink $link;
      say "Removed link: `$link`.";
    }
    elsif (-f $link) {
      unlink $link;
      say "Removed file: `$link`.";
    }
    elsif (-d $link) {
      remove_tree $link;
      say "Removed directory: `$link`.";
    }

    if (! -e $link || $self->{force}) {
      symlink $file, $link;
      say "Created symlink: `$link`." if $self->{verbose};
    }
  }

  my %env = %{${$self}{env}};
  my %install = %{$env{install}};
  my %check = %{$env{check}};

  for my $name (keys %install) {
    unless (-e $install{$name}{path}) {
      say ('~' x 5, "Installing `$name`...", '~' x 5) if $self->{verbose} ;
      system " $install{$name}{cmd}";
      if (exists $install{$name}{after} && defined $install{$name}{after}) {
	system "$install{$name}{after}";
      }
    }
  }

  for my $name (keys %check) {
    unless (-e $check{$name}{path}) {
      say $check{$name}{'warn-msg'};
   }
  }

  my $zeal_conf_file = catdir $ENV{HOME}, '.config', 'Zeal',
                              'Zeal.conf';
  my $docset_dir = catdir $ENV{CHI_SHARE_DIR}, 'zeal', 'docset';

  return unless -f $zeal_conf_file;
  my $tmp = File::Temp->new (CLEANUP => 1,
			     TMPDIR => 1,
			     TEMPLATE => 'dc-artifact-XXXXXXX',
			     SUFFIX => '.conf');
  copy $zeal_conf_file, $tmp->filename;
  $tmp->seek (0, SEEK_SET);
  open (my $ZEAL_FH, '>', $zeal_conf_file);
  while (my $line = $tmp->getline ()) {
    chomp $line;
    $line =~ s|path=.*|path=$docset_dir|;
    say {$ZEAL_FH} $line;
  }
}

package main;
use Getopt::Long q/GetOptions/;

my %options = (
               verbose => 0,
               force => 0,
              );

GetOptions('verbose' => \$options{verbose},
           'force' => \$options{force}) or die 'Invalid arguments.';

unless (exists $ENV{CHI_COD_DIR} and exists $ENV{CHI_ENV_DIR} and exists $ENV{PERL_CPANM_HOME}
	and exists $ENV{PERLBREW_ROOT}) {
    my @var_names = qw/CHI_COD_DIR CHI_ENV_DIR PERL_CPANM_HOME PERLBREW_ROOT/;
    local $" = '\', \'';
    die "At least one of these variables \'@var_names\' are unset.\n"
	."Please set them before invoking this script.\n";
  }

my $env_conf = EnvConf->new(\%options);
$env_conf->pre_configure();
$env_conf->configure();
